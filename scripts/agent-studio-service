#!/bin/bash

# Agent Studio Backend Service Management Script
# Can be used independently or installed as /usr/local/bin/agent-studio

SERVICE_NAME="agent-studio"
INSTALL_DIR="/opt/agent-studio"
CONFIG_FILE="/etc/agent-studio/config.env"
LOG_DIR="/var/log/agent-studio"

# Detect operating system and service manager
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="linux"
    if command -v systemctl >/dev/null 2>&1; then
        SERVICE_MANAGER="systemd"
    else
        SERVICE_MANAGER="manual"
    fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS="macos"
    SERVICE_MANAGER="launchd"
else
    echo "Unsupported operating system: $OSTYPE"
    exit 1
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

show_help() {
    echo "Agent Studio Backend Service Management"
    echo "Usage: $0 {start|stop|restart|status|logs|config|install|uninstall}"
    echo ""
    echo "Commands:"
    echo "  start      Start the service"
    echo "  stop       Stop the service"
    echo "  restart    Restart the service"
    echo "  status     Show service status"
    echo "  logs       Show service logs (real-time)"
    echo "  config     Edit configuration file"
    echo "  install    Install as system service"
    echo "  uninstall  Remove system service"
    echo "  health     Check service health"
    echo ""
    echo "Environment: $OS with $SERVICE_MANAGER"
}

start_service() {
    log "Starting $SERVICE_NAME..."
    
    if [[ "$SERVICE_MANAGER" == "systemd" ]]; then
        sudo systemctl start "$SERVICE_NAME"
        if systemctl is-active --quiet "$SERVICE_NAME"; then
            success "Service started successfully"
        else
            error "Failed to start service"
            exit 1
        fi
    elif [[ "$SERVICE_MANAGER" == "launchd" ]]; then
        sudo launchctl load "/Library/LaunchDaemons/com.agent-studio.backend.plist"
        sleep 2
        if launchctl list | grep -q "com.agent-studio.backend"; then
            success "Service started successfully"
        else
            error "Failed to start service"
            exit 1
        fi
    else
        error "Manual service management not implemented"
        exit 1
    fi
}

stop_service() {
    log "Stopping $SERVICE_NAME..."
    
    if [[ "$SERVICE_MANAGER" == "systemd" ]]; then
        sudo systemctl stop "$SERVICE_NAME"
        success "Service stopped"
    elif [[ "$SERVICE_MANAGER" == "launchd" ]]; then
        sudo launchctl unload "/Library/LaunchDaemons/com.agent-studio.backend.plist"
        success "Service stopped"
    else
        error "Manual service management not implemented"
        exit 1
    fi
}

restart_service() {
    log "Restarting $SERVICE_NAME..."
    
    if [[ "$SERVICE_MANAGER" == "systemd" ]]; then
        sudo systemctl restart "$SERVICE_NAME"
        if systemctl is-active --quiet "$SERVICE_NAME"; then
            success "Service restarted successfully"
        else
            error "Failed to restart service"
            exit 1
        fi
    elif [[ "$SERVICE_MANAGER" == "launchd" ]]; then
        sudo launchctl unload "/Library/LaunchDaemons/com.agent-studio.backend.plist" 2>/dev/null || true
        sleep 1
        sudo launchctl load "/Library/LaunchDaemons/com.agent-studio.backend.plist"
        sleep 2
        if launchctl list | grep -q "com.agent-studio.backend"; then
            success "Service restarted successfully"
        else
            error "Failed to restart service"
            exit 1
        fi
    else
        error "Manual service management not implemented"
        exit 1
    fi
}

show_status() {
    log "Checking $SERVICE_NAME status..."
    
    if [[ "$SERVICE_MANAGER" == "systemd" ]]; then
        systemctl status "$SERVICE_NAME" --no-pager
    elif [[ "$SERVICE_MANAGER" == "launchd" ]]; then
        if launchctl list | grep -q "com.agent-studio.backend"; then
            echo -e "${GREEN}● Service is running${NC}"
            launchctl list com.agent-studio.backend
        else
            echo -e "${RED}● Service is not running${NC}"
        fi
    fi
    
    # Check if port is listening
    if command -v lsof >/dev/null 2>&1; then
        if lsof -i :4936 >/dev/null 2>&1; then
            echo -e "${GREEN}✓ Port 4936 is listening${NC}"
        else
            echo -e "${RED}✗ Port 4936 is not listening${NC}"
        fi
    fi
}

show_logs() {
    log "Showing $SERVICE_NAME logs..."
    
    if [[ "$SERVICE_MANAGER" == "systemd" ]]; then
        # Use journalctl for systemd
        if command -v journalctl >/dev/null 2>&1; then
            journalctl -u "$SERVICE_NAME" -f --no-pager
        else
            # Fallback to log files
            tail -f "$LOG_DIR/output.log" "$LOG_DIR/error.log"
        fi
    else
        # Use log files for other systems
        if [[ -f "$LOG_DIR/output.log" ]] || [[ -f "$LOG_DIR/error.log" ]]; then
            tail -f "$LOG_DIR/output.log" "$LOG_DIR/error.log" 2>/dev/null
        else
            error "Log files not found in $LOG_DIR"
            exit 1
        fi
    fi
}

edit_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        error "Configuration file not found: $CONFIG_FILE"
        error "Please run the installation script first"
        exit 1
    fi
    
    log "Opening configuration file: $CONFIG_FILE"
    
    if command -v nano >/dev/null 2>&1; then
        sudo nano "$CONFIG_FILE"
    elif command -v vim >/dev/null 2>&1; then
        sudo vim "$CONFIG_FILE"
    elif command -v vi >/dev/null 2>&1; then
        sudo vi "$CONFIG_FILE"
    else
        echo "No text editor found. Config file location: $CONFIG_FILE"
        echo "Please edit this file with your preferred editor"
    fi
}

check_health() {
    log "Checking service health..."
    
    # Check if service is running
    local service_running=false
    if [[ "$SERVICE_MANAGER" == "systemd" ]]; then
        if systemctl is-active --quiet "$SERVICE_NAME"; then
            service_running=true
        fi
    elif [[ "$SERVICE_MANAGER" == "launchd" ]]; then
        if launchctl list | grep -q "com.agent-studio.backend"; then
            service_running=true
        fi
    fi
    
    if [[ "$service_running" == "true" ]]; then
        echo -e "${GREEN}✓ Service is running${NC}"
    else
        echo -e "${RED}✗ Service is not running${NC}"
        return 1
    fi
    
    # Check if port is listening
    if command -v curl >/dev/null 2>&1; then
        if curl -s -f "http://localhost:4936/api/health" >/dev/null; then
            echo -e "${GREEN}✓ Health endpoint is responding${NC}"
        else
            echo -e "${RED}✗ Health endpoint is not responding${NC}"
            return 1
        fi
    else
        warn "curl not available, skipping health endpoint check"
    fi
    
    # Check log files
    if [[ -f "$LOG_DIR/error.log" ]]; then
        local error_count=$(tail -n 100 "$LOG_DIR/error.log" 2>/dev/null | grep -c "ERROR" || true)
        if [[ "$error_count" -gt 0 ]]; then
            warn "Found $error_count recent errors in logs"
        else
            echo -e "${GREEN}✓ No recent errors in logs${NC}"
        fi
    fi
    
    success "Health check completed"
}

install_service() {
    error "Service installation should be done using the install.sh script"
    echo "Please run: sudo ./install.sh"
    exit 1
}

uninstall_service() {
    log "Uninstalling $SERVICE_NAME..."
    
    # Stop service first
    stop_service 2>/dev/null || true
    
    if [[ "$SERVICE_MANAGER" == "systemd" ]]; then
        sudo systemctl disable "$SERVICE_NAME" 2>/dev/null || true
        sudo rm -f "/etc/systemd/system/$SERVICE_NAME.service"
        sudo systemctl daemon-reload
    elif [[ "$SERVICE_MANAGER" == "launchd" ]]; then
        sudo rm -f "/Library/LaunchDaemons/com.agent-studio.backend.plist"
    fi
    
    # Remove service script
    sudo rm -f "/usr/local/bin/$SERVICE_NAME"
    
    # Ask before removing data
    echo ""
    read -p "Remove application data and logs? [y/N]: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo rm -rf "$INSTALL_DIR"
        sudo rm -rf "$LOG_DIR"
        sudo rm -rf "/etc/$SERVICE_NAME"
        success "Application data removed"
    else
        log "Application data preserved"
    fi
    
    success "Service uninstalled"
}

# Main command handling
case "$1" in
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    restart)
        restart_service
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    config)
        edit_config
        ;;
    health)
        check_health
        ;;
    install)
        install_service
        ;;
    uninstall)
        uninstall_service
        ;;
    *)
        show_help
        exit 1
        ;;
esac